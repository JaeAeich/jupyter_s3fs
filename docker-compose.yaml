services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
      - server
      - jupyterhub
      - minio
    networks:
      - public
      - private

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    expose:
      - "80"
    depends_on:
      - minio
      - server
    networks:
      - public

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      minio:
        condition: service_healthy
    expose:
      - "3001"
    environment:
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: false
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      BUCKET_NAME: datasets
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - private

  minio:
    image: minio/minio:latest
    expose:
      - "9000"      # API port
      - "9001"      # Console port
    ports:
      - "9000:9000"      # API port
      - "9001:9001"      # Console port
    volumes:
      - minio_data:/data
      - ./minio/cors.json:/root/.minio/config/config.json:ro
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server --console-address ":9001" /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - private

  create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 minio minio123;
      /usr/bin/mc mb minio/datasets;
      /usr/bin/mc policy set public minio/datasets;
      exit 0;
      "
    networks:
      - private

  jupyterhub:
    build:
      context: ./jupyterhub
      dockerfile: Dockerfile
    expose:
      - "8000"
    volumes:
      - ./jupyterhub/jupyterhub_config.py:/srv/jupyterhub/jupyterhub_config.py:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - jupyterhub_data:/srv/jupyterhub/data
      - /dev/fuse:/dev/fuse:rw  # Add this line for FUSE access
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse:/dev/fuse
    security_opt:
      - apparmor:unconfined
    privileged: true
    networks:
      - private

volumes:
  jupyterhub_data:
  minio_data:

networks:
  private:
    name: private
    driver: bridge
  public:
    name: public
    driver: bridge
